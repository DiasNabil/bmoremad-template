#!/usr/bin/env node
/**
 * Script de nettoyage MCP - Supprime les configurations obsol√®tes
 * et nettoie les fichiers MCP surnum√©raires du template BMAD
 */

const fs = require('fs');
const path = require('path');

// Fichiers √† supprimer (configurations MCP obsol√®tes)
const OBSOLETE_FILES = [
  'project.mcp.json',           // Configuration MCP complexe et redondante
  '.claude-mcp-config.json',    // Configuration MCP interm√©diaire
  'MCP-SETUP-GUIDE.md',        // Guide obsol√®te
  'validate-mcp-setup.bat',    // Validation obsol√®te
];

// Dossiers contenant des scripts MCP obsol√®tes √† nettoyer
const OBSOLETE_SCRIPTS = [
  'scripts/init-mcp-services.bat',
  'scripts/mcp-infrastructure-validator.ps1', 
  'scripts/mcp-performance-analyzer.ps1',
  'scripts/monitor-mcp.bat',
  'scripts/validate-mcp-full.bat',
  'scripts/validate-mcp-quick.bat',
  'scripts/validate-mcp-optimizations.bat',
  'scripts/mcp-optimization-validator.py',
  'scripts/validate-motion-mcp.bat'
];

// Dossiers √† nettoyer partiellement
const OBSOLETE_DIRECTORIES = [
  'scripts/mcp',
  'scripts/mcp-validation',
  'scripts/monitoring',
  'scripts/observability'
];

/**
 * Supprime un fichier de mani√®re s√©curis√©e
 */
function safeDelete(filePath) {
  try {
    if (fs.existsSync(filePath)) {
      const stats = fs.statSync(filePath);
      
      if (stats.isDirectory()) {
        fs.rmSync(filePath, { recursive: true, force: true });
        console.log(`üóÇÔ∏è  Dossier supprim√©: ${filePath}`);
      } else {
        fs.unlinkSync(filePath);
        console.log(`üìÑ Fichier supprim√©: ${filePath}`);
      }
      
      return true;
    }
  } catch (error) {
    console.error(`‚ùå Erreur lors de la suppression de ${filePath}:`, error.message);
    return false;
  }
  return false;
}

/**
 * Cr√©e une sauvegarde des fichiers importants avant suppression
 */
function backupImportantFiles() {
  const backupDir = 'backup-mcp-cleanup';
  
  if (!fs.existsSync(backupDir)) {
    fs.mkdirSync(backupDir);
  }
  
  const filesToBackup = [
    'project.mcp.json',
    '.claude-mcp-config.json'
  ];
  
  console.log('üíæ Cr√©ation de sauvegardes...');
  
  for (const file of filesToBackup) {
    if (fs.existsSync(file)) {
      try {
        fs.copyFileSync(file, path.join(backupDir, file));
        console.log(`  ‚úÖ Sauvegarde: ${file} ‚Üí ${backupDir}/${file}`);
      } catch (error) {
        console.error(`  ‚ùå Erreur sauvegarde ${file}:`, error.message);
      }
    }
  }
}

/**
 * Analyse l'√©tat actuel des fichiers MCP
 */
function analyzeCurrentState() {
  console.log('üîç Analyse de la configuration MCP actuelle...\n');
  
  const findings = {
    obsoleteFiles: [],
    obsoleteScripts: [],
    obsoleteDirs: [],
    totalSize: 0
  };
  
  // V√©rifier les fichiers obsol√®tes
  for (const file of OBSOLETE_FILES) {
    if (fs.existsSync(file)) {
      const stats = fs.statSync(file);
      findings.obsoleteFiles.push({
        path: file,
        size: stats.size
      });
      findings.totalSize += stats.size;
    }
  }
  
  // V√©rifier les scripts obsol√®tes
  for (const script of OBSOLETE_SCRIPTS) {
    if (fs.existsSync(script)) {
      const stats = fs.statSync(script);
      findings.obsoleteScripts.push({
        path: script,
        size: stats.size
      });
      findings.totalSize += stats.size;
    }
  }
  
  // V√©rifier les dossiers obsol√®tes
  for (const dir of OBSOLETE_DIRECTORIES) {
    if (fs.existsSync(dir)) {
      findings.obsoleteDirs.push(dir);
    }
  }
  
  return findings;
}

/**
 * Affiche le rapport de nettoyage
 */
function displayCleanupReport(findings) {
  console.log('üìä RAPPORT DE NETTOYAGE MCP');
  console.log('='.repeat(40));
  
  if (findings.obsoleteFiles.length > 0) {
    console.log('\nüìÑ Fichiers de configuration obsol√®tes:');
    findings.obsoleteFiles.forEach(file => {
      console.log(`  ‚Ä¢ ${file.path} (${(file.size / 1024).toFixed(1)} KB)`);
    });
  }
  
  if (findings.obsoleteScripts.length > 0) {
    console.log('\nüîß Scripts obsol√®tes:');
    findings.obsoleteScripts.forEach(script => {
      console.log(`  ‚Ä¢ ${script.path} (${(script.size / 1024).toFixed(1)} KB)`);
    });
  }
  
  if (findings.obsoleteDirs.length > 0) {
    console.log('\nüóÇÔ∏è  Dossiers obsol√®tes:');
    findings.obsoleteDirs.forEach(dir => {
      console.log(`  ‚Ä¢ ${dir}`);
    });
  }
  
  console.log(`\nüíæ Espace total √† lib√©rer: ${(findings.totalSize / 1024).toFixed(1)} KB`);
}

/**
 * Effectue le nettoyage
 */
function performCleanup(findings) {
  console.log('\nüßπ D√©marrage du nettoyage...\n');
  
  let cleaned = 0;
  
  // Supprimer les fichiers obsol√®tes
  for (const file of findings.obsoleteFiles) {
    if (safeDelete(file.path)) cleaned++;
  }
  
  // Supprimer les scripts obsol√®tes
  for (const script of findings.obsoleteScripts) {
    if (safeDelete(script.path)) cleaned++;
  }
  
  // Supprimer les dossiers obsol√®tes
  for (const dir of findings.obsoleteDirs) {
    if (safeDelete(dir)) cleaned++;
  }
  
  console.log(`\n‚úÖ Nettoyage termin√©: ${cleaned} √©l√©ments supprim√©s`);
  
  return cleaned;
}

/**
 * Fonction principale
 */
function main() {
  console.log('üßπ BMAD Template - Nettoyage MCP');
  console.log('='.repeat(40));
  
  // Analyser l'√©tat actuel
  const findings = analyzeCurrentState();
  
  // Afficher le rapport
  displayCleanupReport(findings);
  
  const totalItems = findings.obsoleteFiles.length + findings.obsoleteScripts.length + findings.obsoleteDirs.length;
  
  if (totalItems === 0) {
    console.log('\n‚ú® Aucun fichier obsol√®te trouv√©. Le projet est d√©j√† propre !');
    return;
  }
  
  console.log(`\n‚ö†Ô∏è  ${totalItems} √©l√©ments obsol√®tes trouv√©s`);
  console.log('üîÑ Cr√©ation de sauvegardes avant suppression...\n');
  
  // Cr√©er les sauvegardes
  backupImportantFiles();
  
  // Effectuer le nettoyage
  const cleaned = performCleanup(findings);
  
  console.log('\nüéâ Nettoyage MCP termin√© avec succ√®s !');
  console.log('\nüìã √âtapes suivantes:');
  console.log('  1. Utilisez scripts/configure-mcp-modern.js pour la nouvelle config');
  console.log('  2. Configurez vos tokens dans .env');
  console.log('  3. Red√©marrez Claude Code');
  console.log('\nüí° Sauvegarde disponible dans: backup-mcp-cleanup/');
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
  main();
}

module.exports = {
  analyzeCurrentState,
  performCleanup,
  safeDelete
};